Asynchronous JavaScript
=======================

Async JavaScript - What and Why?
---------------------------------

 In its most basic form, JavaScript is synchronous, blocking and Single Threaded.

1) SYNCHRONOUS: If we have 2 functions which logs messages to the console, code executes Top-Down, with only one line executing at a given time.

2) BLOCKING: 
-> No matter how long a previous process takes, the subsequent process wont kick off untill the former is completed.

-> If function A have to execute an intensive chunck of code, JS have to finish that without moving on to function B, even if that code takes 10 seconds or 1 minute.

-> Web apps runs in a browser and executes and intensive chunk of code without returning control to the browser, the browser can appear to be frozen.

ex:

      function A {
         console.log('Function A')
       }

     function B {
        console.log('Function B')
      }

      A()
      B()

    /* Logs Function A and the Logs Function B */

3) SINGLE-THREADED: -> A thread is simply a process that your JS program can use to run a Task.
                    -> Each thread can do only one task at a time.
                    -> JS has just one thread called as 'Main Thread' for executing any code.

Async JavaScript - How?
-----------------------

-> Just JS is not enough.

-> We need new pieces that are outside of JS to help us write asynchronous code, and this is where web browsers come into the play.

-> Web browsers define functions and APIs that allow us to register functions that should not be executed synchronousaly, and should be invoked asynchronousaly when some kind of event occurs.

-> For example, that could be the passage of time (setTimeout() or setInterval()), the user's interaction with the mouse (addEventListener), or the arrival of data over the network(callbacks, Promises, async-await).

-> You can let your code do several things at the same time without stopping or blocking your main thread.


Timeout & Intervals :
=====================

The traditionals methods JS has available for running code asynchronousaly,

-> after a set time period elapsed (setTimeout)
-> at regular intervals of time (setInterval)

Noteworthy points:
------------------

 1) Timers and Intervals are not the part of JS itself, they are basically implemented by the browser and setTimeout and setInterval are basically names given to that functionality in JavaScript.

 2) Duration parameter is the minimum delay and not the guranteed delay.

 3) It is possible to achieve the same effect as setInterval with a recursive setTimeout.


 setInterval()
 -------------
 setInterval(function run() {
   console.log('Hello')
 }, 100)



setTimeout() (recursive)
------------------------
setTimeout(function run() {
   console.log('Hello')
   setTimeout(run, 100)
}, 100)


Differences in both approaches
------------------------------

recursive setTimeout approach: 
------------------------------

 -> Duration is guranteed between executions, irrespective of how long the code takes to run, the interval will remain the same.

 -> If the code takes longer to run than the time interval itself, then we should go for this approach.

 -> You can calculate a different delay before running each iteration.

 setInterval approach:
 ---------------------

 -> The Duration interval includes the time taken to execute the code you want to run, for eg,

 -> The code takes 40ms to run, the interval is 60 ms, The code takes 50 ms to run, the interval is 50 ms.

 -> setInterval is always a fixed interval duration.


Promises In JS:
===============

MDN Definition:
---------------

- A promise is a proxy for a value,

- which is not necessarily known when the Promise is created,

- It allows us to attach event handlers to an asynchronous action's eventual success value or failure reason.



Normal Definition:
------------------

- A promise is simply an object in JS.

- A promise is always in one of the three states

  * pending - neither fulfilled nor rejected, its the initial state
  * fullfilled - meaning that the operation completed successfully 
  * rejected - meaning that the operation failed.

Why to use Promise?
-------------------

- Promises helps us to deal with asynchronous code in a much better way if compared with callbacks creating callback hells.

- Callbacks were the go to pattern for asynchronousaly running the code after fetching some data.

- As more and more requests has to be made from the data obtained from previousaly made request, developers started to encounter something called as Callback hell.

- Hence we overcome that using Promises.

example for a callback hell:
----------------------------

fetchCurrentUser('/api/user', function(result1) {

  fetchFollowersByUserID('/api/followers/${result1.userID}', function(result2) {

    fetchFollowerInterest('api/intererest/${result2.followerId}', function(result3) {

      fetchInterestTags('api/tags/${result3.interestId}', function(result4) {

        fetchTagDescription('api/description/${result4.tagId}', function(result5) {
          
          // finally display the data
          console.log('Data', result5);
        })
      })
    })
  })
})


Solved using promise:
---------------------

const promise = fetchCurrentUser('/api/user')

promise
.then(result1 => fetchFollowersByUserID('/api/followers/${result1.userID}'))
.then(result2 => fetchFollowerInterest(('api/intererest/${result2.followerId}'))
.then(result3 => fetchInterestTags('api/tags/${result3.interestId}'))
.then(result4 => fetchTagDescription('api/description/${result4.tagId}'))
.then( result5 => console.log('Data', result5))


// Creating and executing a promise :
-------------------------------------
let promise = new Promise((resolve, reject) => {

 // on fullfillment, resolve() method change promise status from pending to fullfilled
  resovle('Bringing tacos')

  // on rejection, rejetc() method change promise status from pending to rejected
  reject('Not bringing tacos, shops is closed')
})


- We can create a promise using Promise constructor function

- It takes a callback as parameter.

- That callback function recives resolve and reject functions as parameter.

- resolve() -> Change proimise status from pending to fullfilled

- reject() -> Change promise status from pending to rejected 


Example:
--------

let promise1 = new Promise((resovle, reject) => {

  // on fullfillment, resolve() method change promise status from pending to fullfilled
  resovle('Bringing tacos')

  // on rejection, rejetc() method change promise status from pending to rejected
  reject('Not bringing tacos, shops is closed')
})

let onPromiseFullfillment = (result) => {
  console.log(result)
  console.log('Set Up the table to eat tacos')
}

let onPromiseRejection = (error) => {
  console.log(error)
  console.log('Please start cooking pasta')
}

promise1
.then(onPromiseFullfillment)
.catch(onPromiseRejection) 


Promise static methods:
-----------------------

a) Promise.all()
----------------

- Query multiple APIs and perform some action but only after all the apis has finished loading.

Example:
--------
const promise1 = Promise.resolve(3)

const promise2 = 42

const promise3 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, 'foo')
})

Promise.all([promise1, promise2, promise3])
.then((values) => console.log(values)) // [ 3, 42, 'foo' ]

* The Promise.all() method takes an iterbale of Promises as an input and returns a single promise that resolve to an array of results of the input promises.

* Retruned promise will resolve only when all of the input's promises has resolved, or if the input iterable contains no more promises.

* It rejects immediately if any of the input promises reject, or the non-promises throw an error, and will reject with this first rejection message/error.


b) Promise.allSettled()
-----------------------

- This method waits for all input promises to get completed, regardless of whether or not one of them is rejected

Example:
--------

const promise4 = Promise.resolve(3)

const promise5 = Promise.reject('promise5 is rejected')

const promise6 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, 'foo')
})

Promise.all([promise4, promise5, promise6])
.then((values) => console.log(values)) 
.catch(error => console.log(error))


/ c) Promise.race()
// ----------------

// - This method returns a promise that gets fullfilled or rejects, as soon as one of the input promises fullfills or rejects, with the value or reason from that promise.

// - Here in prom1 and prom2, prom1 is faster and gets resolved first and hence race() method takes it and execute.

const prom1 = new Promise((resolve, reject) => {
  setTimeout(resolve, 500, 'prom1 resolved')
})

const prom2 = new Promise((resolve, reject) => {
  setTimeout(resolve, 600, 'prom2 resolved')
})

Promise.race([prom1, prom2])
.then((values) => console.log(values))
.catch((error) => console.log(error))



Async-Await:
============

- The async await keywords allows us to write completely synchronous looking code while performing asynchronous task behind the scenes.

async:
------

- The async keyword is used to define async functions.

- Async functions are functions that are instances of the AsyncFunction constructor.

- Unlike normal JS functions, anync functions always returns a Promise.

- If u don't explicitly return a promise, the aync function will automatically wrap the value in a resolved promise.

// normal function
function greet() {
  return 'Hello';
}

console.log(greet()); // Hello 

// async function
async function greet2() {
  return 'Hello';
}

console.log(greet2()); // Promise { <fulfilled>: 'Hello }

- here fullfilled is promise status, and hello is promise value. 

- If u don't explicitly return a promise, the aync function will automatically wrap the value in a resolve() promise.

- Hence we can also write it better like this, we use .then() function to consume the promise result

async function greet3() {
  return Promise.resolve('Hello');
}

greet3().then(res => console.log(res)); // Hello


await:
------

- await keyword can be put infront of any async promise based function to pause your code untill the promise settles down and returns it result.

- await keyword works only inside an async function, We cannot use await inside normal functions.

Example:
--------


// Await:
// ======

async function showName() {

  let promise = new Promise((resolve, reject) => {
    setTimeout(() => resolve('Hello Ujjwal'), 6000)
  })

  let promiseResult = await promise // wait untill the promise resolves 

  console.log(promiseResult)
}

showName()

- await keyword pauses code execution untill the promise settles down completely,

- In above eg, promise gets 6 seconds to resolve hence code execution inside showName() function is completely stopped inside the function for those 6 seconds untill the promise resolves, 

- The JS engine can do other tasks outside of this function meanwhile, but as far as showName() fn is concerned, control resumes after 6 seconds only, 

- And after it resolves code execution is continued with promise returned value.

